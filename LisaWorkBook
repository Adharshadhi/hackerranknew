Problem
----------

Lisa just got a new math workbook. A workbook contains exercise problems, grouped into chapters. 
Lisa believes a problem to be special if its index (within a chapter) is the same as the page number where it's located. 
The format of Lisa's book is as follows:

There are 'n' chapters in Lisa's workbook, numbered from 1 to n.
The i^th chapter has 'arr[i]' problems, numbered from 1 to arr[i].
Each page can hold up to 'k' problems. Only a chapter's last page of exercises may contain fewer than k problems.
Each new chapter starts on a new page, so a page will never contain problems from more than one chapter.
The page number indexing starts at 1.

Given the details for Lisa's workbook, can you count its number of special problems? (special problem means page number and exercise number should match)

Example
--------
Input  = arr = [4,2] , k = 3

Output = 1 => In page number 1 there would 1,2,3(chapter 1) problems. Here page number 1 matches with problem number 1 in same chapter. So it is a special problem. 
              Similarly page number 2 would contain problem number 4(chapter 1) and page number 3 would contain problem 1 and 2 (chapter 2).

Sample INPUT and OUTPUT
------------------------
Input                                            Output

arr=[4, 2, 6, 1, 10], k = 3, n = 5                 4

My Solution
-------------

public static int workbook(int k, List<Integer> arr) {
    List<Integer> tempList = new ArrayList<>();
    int result = 0;
    int pageCounter = 1;
    for (Integer integer : arr) {
        for (int j = 1; j <= integer; j++) {
            tempList.add(j);
            if (j % k == 0 || (!tempList.isEmpty() && j == integer)) {
                if(tempList.contains(pageCounter)){
                    result++;
                }
                tempList.clear();
                pageCounter++;
            }
        }
    }
    return result;
}
